"use strict";(self.webpackChunkionio_website=self.webpackChunkionio_website||[]).push([[169],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(n),g=a,h=m["".concat(s,".").concat(g)]||m[g]||u[g]||i;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},47:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={},s="Functions",c={unversionedId:"language/Functions",id:"language/Functions",title:"Functions",description:"The following functions and operators are available when compiling Ivy to Bitcoin Script:",source:"@site/docs/language/Functions.md",sourceDirName:"language",slug:"/language/Functions",permalink:"/docs/language/Functions",editUrl:"https://github.com/ionio-lang/ionio/tree/main/website/docs/language/Functions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example Contracts",permalink:"/docs/language/ExampleContracts"},next:{title:"Ivy Syntax",permalink:"/docs/language/IvySyntax"}},l=[],u={toc:l};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"functions"},"Functions"),(0,i.kt)("p",null,"The following functions and operators are available when compiling Ivy to Bitcoin Script:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"checkSig(publicKey: PublicKey, sig: Signature) -> Boolean"),": check that the signature ",(0,i.kt)("strong",{parentName:"p"},"sig "),"is a valid signature on the spending transaction by the private key corresponding to ",(0,i.kt)("strong",{parentName:"p"},"publicKey"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"checkMultiSig(publicKeys: ","[PublicKey]",", sigs: ","[Signature]",") -> Boolean"),": check that each of the signatures in ",(0,i.kt)("strong",{parentName:"p"},"sigs")," is a valid signature on the spending transaction by the private key corresponding to one of the ",(0,i.kt)("strong",{parentName:"p"},"publicKeys"),". The signatures must be provided in the same order as their respective public keys.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"after(time: Time) -> Boolean"),": check that the current block time (or block height) is after ",(0,i.kt)("strong",{parentName:"p"},"time"),". This uses the transaction\u2019s nLockTime field and the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki"},"CHECKLOCKTIMEVERIFY")," instruction.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"older(duration: Duration) -> Boolean"),": check that the contract being spent has been on the blockchain for at least ",(0,i.kt)("strong",{parentName:"p"},"duration")," (w). This uses the input\u2019s sequence number and the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki"},"CHECKSEQUENCEVERIFY")," instruction.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"sha256(preimage: (T: HashableType)) -> Sha256(T)"),": compute the SHA-256 hash of ",(0,i.kt)("strong",{parentName:"p"},"preimage"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"sha1(preimage: (T: HashableType)) -> Sha1(T)"),": compute the SHA-1 hash of ",(0,i.kt)("strong",{parentName:"p"},"preimage"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ripemd160(preimage: (T: HashableType)) -> Ripemd160(T)"),": compute the RIPEMD-160 hash of ",(0,i.kt)("strong",{parentName:"p"},"preimage"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"bytes(item: T) -> Bytes"),": coerce ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," to a bytestring (of type Bytes). This function does not have any effect on the compiled output or on script execution (since the Bitcoin Script VM treats every item as a bytestring); it only affects typechecking. (This cannot be called on an item of type Value or Boolean.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"size(bytestring: Bytes) -> Number"),": get the length of ",(0,i.kt)("inlineCode",{parentName:"p"},"bytestring")," in bytes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"=="),", ",(0,i.kt)("strong",{parentName:"p"},"!="),": check equality of any two values of the same type. (Note: because of certain limitations of Bitcoin Script, using these operators on Booleans is not allowed.)"))))}m.isMDXComponent=!0}}]);