"use strict";(self.webpackChunkionio_website=self.webpackChunkionio_website||[]).push([[121],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7273:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},c="JavaScript SDK",l={unversionedId:"js/README",id:"js/README",title:"JavaScript SDK",description:"Ivy is also available as a (very unstable and early-stage) JavaScript SDK.",source:"@site/docs/js/README.md",sourceDirName:"js",slug:"/js/",permalink:"/docs/js/",editUrl:"https://github.com/ionio-lang/ionio/tree/main/website/docs/js/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UnlockingContracts",permalink:"/docs/playground/UnlockingContracts"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"javascript-sdk"},"JavaScript SDK"),(0,i.kt)("p",null,"Ivy is also available as a (very unstable and early-stage) ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/ivy-bitcoin"},"JavaScript SDK"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install ivy-bitcoin\n")),(0,i.kt)("p",null,"This library allows you to write and compile contract templates, instantiate them with arguments (to create Bitcoin addresses), create dummy contracts (with fake value), and unlock them with arguments. "),(0,i.kt)("p",null,"It does not support creating real transactions (on either the testnet or mainnet). Do not try to send BTC to addresses created by this library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  compile,\n  fulfill,\n  instantiate,\n  spend,\n  toSighash,\n  createSignature,\n  crypto\n} from "ivy-bitcoin"\n\nconst source = `contract LockWithPublicKey(publicKey: PublicKey, val: Value) {\n  clause spend(sig: Signature) {\n    verify checkSig(publicKey, sig)\n    unlock val\n  }\n}`\nconst privateKey = "Kyw8s2qf2TxNnJMwfrKYhAsZ6eAmMMhAv4Ej4VVE8KpVsDvXurJK"\nconst publicKey = crypto.KeyRing.fromSecret(privateKey).getPublicKey("hex")\nconst destinationAddress = ""\nconst amount = 0\nconst locktime = 0\nconst sequenceNumber = { sequence: 0, seconds: false }\n\n// compile the template\nconst template = compile(source)\n\n// instantiate it\nconst instantiated = instantiate(template, [publicKey, amount])\n\n// get the testnet and mainnet addresses corresponding to the contract\n// note: any BTC sent to these addresses may not be recoverable!\nconsole.log(instantiated.testnetAddress)\nconsole.log(instantiated.mainnetAddress)\n\n// create the spending transaction\nconst spendTransaction = spend(\n  instantiated.fundingTransaction,\n  destinationAddress,\n  amount,\n  locktime,\n  sequenceNumber\n)\n\n// sign it\nconst sighash = toSighash(instantiated, spendTransaction)\nconst sig = createSignature(sighash, privateKey)\n\n// add the signature so the script succeeds\nconst fulfilledTransaction = fulfill(instantiated, spendTransaction, [sig], "spend")\n\n// throw an error if transaction is invalid\nfulfilledTransaction.check()\n')),(0,i.kt)("p",null,"For more examples of how to use the library, see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ivy-lang/ivy-bitcoin/blob/main/ivy-bitcoin/src/test/test.ts"},"tests"),"."))}d.isMDXComponent=!0}}]);